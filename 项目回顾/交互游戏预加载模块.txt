该模块是在线小班课课件播放器中的一个功能模块：
之前的交互游戏是由中台加载的，使用过程中用户反馈切换到游戏时会有割裂感。
所以这个模块的内容是游戏放在播放器中加载，功能内容包含游戏的统一加载动画、
游戏的尝试机制以及错误提示等。
该模块由原生js实现。

整个项目流程描述：
客户端调用SDK，传递初始化参数，包含课件地址、是否开启预加载，SDK创建iframe后，
监听课件消息，收到课件目录后解析数据，从目录中过滤游戏页，并根据目录信息请求游戏页
对应的详细数据，包括游戏地址、画布大小、游戏位置、游戏大小，请求完成后将包含游戏数据的
目录发送给客户端，等SDK收到课件的加载完成消息后通知客户端移除loading界面。
项目中客户端移除loading的逻辑分为授课端和学生端：
由于授课端没有恢复的功能，所以每一次初始化都是在第一页，并且为了保证授课端的连贯性，
会在请求完所有的游戏数据后再通知授课端取消loading，如果有请求失败的，需要直接提示授课端，重新加载
课件。
而学生端有课件恢复的功能，每次初始化时会从远程拉取授课端的状态，如果对应的页是游戏，
需要优先请求恢复页的数据，恢复页请求完成后通知客户端取消loading，并不需要等所有
游戏数据请求完成，如果某一页请求失败，需要在切换到对应页时提示客户端重新加载课件。

遇到的困难及解决方法：
1、Lottie动画的使用
    游戏加载过程中需要实现一个loading动画，最初是使用lottie动画实现的，并且
    在特定的游戏帧进行不同的处理（重复播放和播放结束），但是实际在ipad测试时
    发现，Lottie动画对设备性能影响较大（实际客户端需要拉流、推流以及其他功能），
    后续和动画老师减少了动画碎片，但没有多大改善，最后采用了图片+css3 animation实现
    ，并在特殊的点切换不同的动画（css3可以调用GPU加速，但也不能太复杂，会耗性能，
    影响课件的渲染）。

2、promise.allsettled
    在请求目录时授课端和学生端的处理不同，授课端需要所有数据请求成功再上报课件就绪，
    而学生端只需要全部请求即可，不需要区分是否成功。所以使用promise.allsettled，
    但PC学生端由于是自己封装的浏览器内核，版本低，不支持这个方法，所以最后自己实现
    了一遍这个方法

    if(promise.allsettled) {
        return promise.allsettled([]);
    } else {
        return new Promise(resolve => {
            // arr promise数组
            let count = arr.length;
            let result = [];
            for (let i = 0; i < arr.length; i += 1 ) {
                arr[i].finally(() => {
                    if (!--count) resolve()
                })
            }
        })
    }
